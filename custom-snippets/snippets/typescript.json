{
	"Jest it condition": {
		"prefix": "jit",
		"body": [
			"it(`should return $1`, async() => {",
			"\t//* Arrange",
	  		"\t$2",
			"\t//* Act",
			"\t$3",
			"\t//* Assert",
			"\t$4",
			"});"
		]
	},

	"Describe jest": {
		"prefix": "jdesc",
		"body": [
			"describe(`$1`, () => {",
			"\tdescribe(`success`, () => {",
			"\t});",
			"\tdescribe(`failure`, () => {",
			"\t});",
			"});"
		]
	},

	"Try catch" : {
		"prefix": "tc",
		"body": [
			"try {",
			"\t",
			"} catch (err) {",
			"\tlogger.error(`[$1] ${prettyJSON(err)} ${ err }`);",
			"\t$2",
			"}"
		]
	},

	"Logger debug": {
		"prefix": "ld",
		"body": [
			"logger.debug(`[$1][PREM-DEBUG] $2`);"
		]
	},

  "Logger debug with json": {
		"prefix": "ldj",
		"body": [
			"logger.debug(`[$1][PREM-DEBUG] $2:${prettyJSON($3)}`);"
		]
	},

  "Logger error": {
		"prefix": "le",
		"body": [
      "logger.error(`[$1] $2`);"
		]
	},

  "Function scaffold": {
    "prefix": "fn",
    "body": [
      "public async $1({",
      "\t$4",
      "}:{",
      "\t$4",
      "}){",
      "\ttry{",
      "\t\t",
      "\t} catch (err) {",
      "\t\tlogger.error(`[$2.$1] ${prettyJSON(err)} ${ err }`);",
      "\t\treturn $3",
      "\t}",
      "}"
    ]
  },

  "Arrow function scaffold": {
    "prefix": "afn",
    "body": [
      "$1 = async({",
      "}) => {",
      "}"
    ]
  },

  "Jest fn (m)ock (r)esolved (v)alue (o)nce": {
    "prefix": "mockres1",
    "body": [
      "$1 = jest.fn().mockResolvedValueOnce($2)"
    ]
  },

  "Jest fn (m)ock (r)e(t)urn (v)alue (o)nce": {
    "prefix": "mockret1",
    "body": [
      "$1 = jest.fn().mockReturnValueOnce($2)"
    ]
  },

  "Jest fn should have been called nth time with": {
    "prefix": "nthcalledwith",
    "body": [
      "expect($1).toHaveBeenNthCalledWith($2, $3)"
    ]
  },

  "Jest fn to have been called times": {
    "prefix": "calledtimes",
    "body": [
      "expect($1).toHaveBeenCalledTimes($2)"
    ]
  }





}
